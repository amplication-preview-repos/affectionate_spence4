/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SeriesService } from "../series.service";
import { SeriesCreateInput } from "./SeriesCreateInput";
import { Series } from "./Series";
import { SeriesFindManyArgs } from "./SeriesFindManyArgs";
import { SeriesWhereUniqueInput } from "./SeriesWhereUniqueInput";
import { SeriesUpdateInput } from "./SeriesUpdateInput";

export class SeriesControllerBase {
  constructor(protected readonly service: SeriesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Series })
  async createSeries(@common.Body() data: SeriesCreateInput): Promise<Series> {
    return await this.service.createSeries({
      data: data,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        releaseDate: true,
        seasons: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Series] })
  @ApiNestedQuery(SeriesFindManyArgs)
  async seriesItems(@common.Req() request: Request): Promise<Series[]> {
    const args = plainToClass(SeriesFindManyArgs, request.query);
    return this.service.seriesItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        releaseDate: true,
        seasons: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Series })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async series(
    @common.Param() params: SeriesWhereUniqueInput
  ): Promise<Series | null> {
    const result = await this.service.series({
      where: params,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        releaseDate: true,
        seasons: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Series })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSeries(
    @common.Param() params: SeriesWhereUniqueInput,
    @common.Body() data: SeriesUpdateInput
  ): Promise<Series | null> {
    try {
      return await this.service.updateSeries({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          genre: true,
          id: true,
          releaseDate: true,
          seasons: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Series })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSeries(
    @common.Param() params: SeriesWhereUniqueInput
  ): Promise<Series | null> {
    try {
      return await this.service.deleteSeries({
        where: params,
        select: {
          createdAt: true,
          description: true,
          genre: true,
          id: true,
          releaseDate: true,
          seasons: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
